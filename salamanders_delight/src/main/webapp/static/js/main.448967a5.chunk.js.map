{"version":3,"sources":["pages/Welcome.tsx","redux/hooks.ts","redux/salamanderSlice.tsx","pages/Login/Login.tsx","components/LogoutButton/LogoutButton.tsx","components/CreateRequestForm/CreateRequestForm.tsx","components/ReimbursementTables/EmployeeReimbursementTable.tsx","components/PageGreeting/PageGreeting.tsx","components/EmployeeInfoViewer/EmployeeInfoViewer.tsx","pages/EmployeeHome.tsx","components/ReimbursementTables/ManagerReimbursementViewer.tsx","pages/ManagerHome.tsx","pages/NoSuchUser.tsx","pages/InvalidPassword.tsx","components/Header.tsx","Salamander.js","redux/store.ts","reportWebVitals.js","index.tsx","Salamander.module.css"],"names":["Welcome","history","useHistory","Button","color","variant","onClick","e","push","useAppDispatch","useDispatch","useAppSelector","useSelector","salamanderSlice","createSlice","name","initialState","requestsState","loginState","userID","password","loginType","createRequestState","justification","amount","currentUser","firstName","lastName","id","timestamp","date","reducers","updateAllRequests","state","action","payload","resetEmployeeRequests","setRequestFormState","console","log","fieldName","value","setLoginFormState","resetLoginFormData","setCurrentUser","resetCurrentUser","actions","selectSalamander","salamander","useStyles","makeStyles","theme","root","margin","spacing","width","Login","classes","dispatch","formChangeHandler","event","target","FormControl","className","component","FormLabel","TextField","autoComplete","type","label","onChange","RadioGroup","aria-label","row","FormControlLabel","control","Radio","axios","post","headers","then","response","nextURL","data","catch","err","LogoutButton","CreateRequestForm","requestFormChangeHandler","placeholder","postData","requesterID","get","EmployeeReimbursementTable","useMemo","Fragment","TableContainer","Paper","Table","styles","table","TableHead","TableRow","TableCell","align","TableBody","map","request","scope","resolved","PageGreeting","EmployeeInfoViewer","userProfile","error","updateHandler","newValue","prompt","field","put","setUserObject","EmployeeHome","ManagerReimbursementViewer","ManagerHome","NoSuchUser","InvalidPassword","Header","Salamander","exact","path","store","configureStore","reducer","salamanderReducer","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.448967a5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Welcome = () => {\r\n  const history = useHistory();\r\n  return (\r\n    <div>\r\n      This will be the home page\r\n      <Button color=\"primary\" variant=\"contained\" onClick={(e) => {\r\n        history.push(\"/login\");\r\n      }}>\r\n        Enter\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Welcome;\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport type { RootState, AppDispatch } from './store';\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;","import {\r\n  // createAsyncThunk,\r\n  createSlice,\r\n  //  PayloadAction\r\n} from \"@reduxjs/toolkit\";\r\nimport {\r\n  RootState,\r\n  //  AppThunk\r\n} from \"./store\";\r\n\r\nexport interface SalamanderState {\r\n  requestsState: Array<{\r\n    amount: number | null;\r\n    justification: string | null;\r\n    requesterID: string;\r\n    resolved: boolean;\r\n    id: { timestamp: number; date: number };\r\n  }>;\r\n  loginState: { userID: string; password: string; loginType: String };\r\n  createRequestState: { justification: string; amount: string | number | null };\r\n  currentUser: {\r\n    firstName: string;\r\n    lastName: string;\r\n    userID: string;\r\n    password: string;\r\n    id: { timestamp: number | null; date: number | null };\r\n  };\r\n}\r\n\r\nconst initialState: SalamanderState = {\r\n  requestsState: [],\r\n  loginState: { userID: \"\", password: \"\", loginType: \"\" },\r\n  createRequestState: { justification: \"\", amount: \"\" },\r\n  currentUser: {\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    userID: \"\",\r\n    password: \"\",\r\n    id: { timestamp: null, date: null },\r\n  },\r\n};\r\n\r\nexport const salamanderSlice = createSlice({\r\n  name: \"salamander\",\r\n  initialState,\r\n  reducers: {\r\n    updateAllRequests: (state, action) => {\r\n      state.requestsState = action.payload;\r\n    },\r\n    resetEmployeeRequests: (state) => {\r\n      state.requestsState = [];\r\n    },\r\n    setRequestFormState: (state, action) => {\r\n      console.log(\"action\", action);\r\n      const fieldName = action.payload.fieldName;\r\n      const value = action.payload.value;\r\n      console.log(`updating ${fieldName} to ${value}`);\r\n      state.createRequestState = {\r\n        ...state.createRequestState,\r\n        [fieldName]: value,\r\n      };\r\n    },\r\n    setLoginFormState: (state, action) => {\r\n      console.log(\"action\", action);\r\n      const fieldName = action.payload.fieldName;\r\n      const value = action.payload.value;\r\n      console.log(`updating ${fieldName} to ${value}`);\r\n      state.loginState = { ...state.loginState, [fieldName]: value };\r\n    },\r\n    resetLoginFormData: (state) => {\r\n      state.loginState.userID = \"\";\r\n      state.loginState.password = \"\";\r\n      state.loginState.loginType = \"\";\r\n    },\r\n    setCurrentUser: (state, action) => {\r\n      console.log(\"action\", action);\r\n      console.log(\"action.payload\", action.payload);\r\n      state.currentUser = { ...state.currentUser, ...action.payload };\r\n    },\r\n    resetCurrentUser: (state) => {\r\n      state.currentUser = {\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        userID: \"\",\r\n        password: \"\",\r\n        id: { timestamp: null, date: null },\r\n      };\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  updateAllRequests,\r\n  resetEmployeeRequests,\r\n  setRequestFormState,\r\n  setLoginFormState,\r\n  resetLoginFormData,\r\n  setCurrentUser,\r\n  resetCurrentUser,\r\n} = salamanderSlice.actions;\r\n\r\nexport const selectSalamander = (state: RootState) => state.salamander;\r\n\r\nexport default salamanderSlice.reducer;\r\n","import React from \"react\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport { useAppSelector, useAppDispatch } from \"../../redux/hooks\";\r\nimport {\r\n  resetLoginFormData,\r\n  setLoginFormState,\r\n  selectSalamander,\r\n} from \"../../redux/salamanderSlice\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport axios from \"axios\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n      width: \"25ch\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst Login = () => {\r\n  const classes = useStyles();\r\n  const salamander = useAppSelector(selectSalamander);\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  const formChangeHandler = (event: any) => {\r\n    console.log(event)\r\n    const fieldName = event.target.name;\r\n    const value = event.target.value;\r\n    dispatch(setLoginFormState({ fieldName, value }));\r\n  };\r\n\r\n  const submitLogin = () => {\r\n    console.log(\"login\", salamander.loginState);\r\n    console.log(\r\n      \"Calling Login Servlet with login object: \",\r\n      salamander.loginState\r\n    );\r\n    axios\r\n      .post(\"/api/attempt_login\", salamander.loginState, {\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n      })\r\n      .then((response) => {\r\n        const nextURL = response.data;\r\n        history.push(nextURL);\r\n      })\r\n      .catch((err) => {\r\n        const nextURL = err.response.data;\r\n        dispatch(resetLoginFormData());\r\n        history.push(nextURL);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <FormControl className={classes.root} component=\"fieldset\">\r\n      <FormLabel component=\"legend\">Login</FormLabel>\r\n      <TextField\r\n        autoComplete=\"off\"\r\n        type=\"text\"\r\n        label=\"User ID\"\r\n        variant=\"outlined\"\r\n        name=\"userID\"\r\n        onChange={formChangeHandler}\r\n      />\r\n      <TextField\r\n        autoComplete=\"off\"\r\n        type=\"password\"\r\n        label=\"Password\"\r\n        variant=\"outlined\"\r\n        name=\"password\"\r\n        onChange={formChangeHandler}\r\n      />\r\n      <RadioGroup\r\n        aria-label=\"gender\"\r\n        name=\"loginType\"\r\n        row\r\n        value={salamander.loginState.loginType}\r\n        onChange={formChangeHandler}\r\n      >\r\n        <FormControlLabel\r\n          value=\"employee\"\r\n          control={<Radio />}\r\n          label=\"Employee\"\r\n        />\r\n        <FormControlLabel value=\"manager\" control={<Radio />} label=\"Manager\" />\r\n      </RadioGroup>\r\n      <Button color=\"primary\" variant=\"contained\" onClick={submitLogin}>\r\n        Submit\r\n      </Button>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport{ resetLoginFormData, resetEmployeeRequests, resetCurrentUser } from \"../../redux/salamanderSlice\";\r\nimport { useAppDispatch } from \"../../redux/hooks\";\r\n\r\nconst LogoutButton = () => {\r\n  const history = useHistory();\r\n  const dispatch = useAppDispatch();\r\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n     //  Reset currently logged in user State\r\n     dispatch(resetLoginFormData());\r\n     dispatch(resetEmployeeRequests());\r\n     dispatch(resetCurrentUser());\r\n    history.push(\"/\");\r\n  };\r\n  return (\r\n    <div>\r\n      <Button\r\n        onClick={(e) => {\r\n          handleClick(e);\r\n        }}\r\n      >\r\n        Log Out\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LogoutButton;\r\n","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {\r\n  setRequestFormState,\r\n  selectSalamander,\r\n  updateAllRequests,\r\n} from \"../../redux/salamanderSlice\";\r\nimport { useAppSelector, useAppDispatch } from \"../../redux/hooks\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport axios from \"axios\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n      width: \"25ch\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst CreateRequestForm = () => {\r\n  const classes = useStyles();\r\n  const salamander = useAppSelector(selectSalamander);\r\n  const dispatch = useAppDispatch();\r\n\r\n  const requestFormChangeHandler = (event: {\r\n    target: { name: any; value: any };\r\n  }) => {\r\n    const fieldName = event.target.name;\r\n    const value = event.target.value;\r\n    console.log(`the value of ${fieldName} is now ${value}`);\r\n    dispatch(setRequestFormState({ fieldName, value }));\r\n  };\r\n\r\n  const getAllReimbursementRequestsForCurrentUser = () => {\r\n    axios\r\n      .get(`/api/get_requests?userID=${salamander.loginState.userID}`)\r\n      .then((response) => {\r\n        console.log(\"response.data\", response.data);\r\n        dispatch(updateAllRequests(response.data));\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"there was an error: \", err.response);\r\n      });\r\n  };\r\n\r\n  const submitNewRequest = () => {\r\n    // I want to call the servlet that makes a new request.\r\n    console.log(\"salamander.loginState\", salamander.loginState)\r\n    console.log(\"calling /create_new_request with data: \", salamander.createRequestState);\r\n    const postData = {\r\n      requesterID: salamander.loginState.userID,\r\n      justification: salamander.createRequestState.justification,\r\n      amount: salamander.createRequestState.amount\r\n    }\r\n    axios\r\n      .post(\"/api/create_new_request\", postData)\r\n      .then((response) => {\r\n      \r\n        console.log(\"response.data\", response.data);\r\n        getAllReimbursementRequestsForCurrentUser();\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"There was an error\", err);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form className={classes.root}>\r\n        <TextField\r\n          autoComplete=\"off\"\r\n          type=\"text\"\r\n          label=\"Justification\"\r\n          variant=\"outlined\"\r\n          name=\"justification\"\r\n          onChange={requestFormChangeHandler}\r\n        />\r\n        <TextField\r\n          autoComplete=\"off\"\r\n          type=\"number\"\r\n          label=\"Amount\"\r\n          variant=\"outlined\"\r\n          name=\"amount\"\r\n          placeholder=\"in USD\"\r\n          onChange={requestFormChangeHandler}\r\n        />\r\n        <Button onClick={submitNewRequest}>Submit</Button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateRequestForm;\r\n","import React, { useMemo } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport axios from \"axios\";\r\nimport { updateAllRequests, selectSalamander} from \"../../redux/salamanderSlice\";\r\nimport { useAppSelector, useAppDispatch } from \"../../redux/hooks\";\r\nimport styles from \"../../Salamander.module.css\";\r\n\r\nconst EmployeeReimbursementTable = () => {\r\n  const salamander = useAppSelector(selectSalamander);\r\n  const dispatch = useAppDispatch();\r\n  \r\n  const getAllReimbursementRequestsForCurrentUser = () => {\r\n    axios\r\n      .get(`/api/get_requests?userID=${salamander.loginState.userID}`)\r\n      .then((response) => {\r\n        console.log(\"response.data\", response.data);\r\n        dispatch(updateAllRequests(response.data));\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"there was an error: \", err.response);\r\n      });\r\n  };\r\n  \r\n  useMemo(() => {\r\n    getAllReimbursementRequestsForCurrentUser();\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>     \r\n      <TableContainer component={Paper}>\r\n        <Table className={styles.table} aria-label=\"reimbursement table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>Justification</TableCell>\r\n              <TableCell align=\"right\">Amount</TableCell>\r\n              <TableCell align=\"right\">Status</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {salamander.requestsState.map((request) => (\r\n              <TableRow key={request.id.timestamp}>\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                  {request.justification}\r\n                </TableCell>\r\n                <TableCell align=\"right\">{request.amount}</TableCell>\r\n                <TableCell align=\"right\">\r\n                  {request.resolved ? \"Resolved\" : \"Pending\"}\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default EmployeeReimbursementTable;\r\n","import react from \"react\";\r\nimport { selectSalamander } from \"../../redux/salamanderSlice\";\r\nimport { useAppSelector } from \"../../redux/hooks\";\r\n\r\nconst PageGreeting = () => {\r\n  const salamander = useAppSelector(selectSalamander);\r\n  return <h1>Welcome, {salamander.currentUser.firstName}.</h1>;\r\n};\r\n\r\nexport default PageGreeting;\r\n","import react, { MouseEventHandler, useMemo } from \"react\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport axios from \"axios\";\r\nimport { selectSalamander, setCurrentUser } from \"../../redux/salamanderSlice\";\r\nimport { useAppDispatch, useAppSelector } from \"../../redux/hooks\";\r\nimport styles from \"../../Salamander.module.css\";\r\n\r\nconst EmployeeInfoViewer = () => {\r\n  const salamander = useAppSelector(selectSalamander);\r\n  const dispatch = useAppDispatch();\r\n\r\n  const getCurrentUserAndSetCurrentUserState = () => {\r\n    axios\r\n      .get(`/api/current_user?userID=${salamander.loginState.userID}&loginType=${salamander.loginState.loginType}`)\r\n      .then((response) => {\r\n        console.log(\"response\", response);\r\n        const userProfile = response.data;\r\n        dispatch(setCurrentUser(userProfile));\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"There was an error: \", error);\r\n      });\r\n  };\r\n\r\n  useMemo(() => {\r\n    getCurrentUserAndSetCurrentUserState();\r\n  }, []);\r\n\r\n  const updateHandler = (event: any) => {\r\n    console.log(event);\r\n    const newValue = prompt(`Submit a new ${event.target.name}`);\r\n    if (newValue) {\r\n      const data = {\r\n        userID: salamander.currentUser.userID,\r\n        field: event.target.name,\r\n        value: newValue,\r\n      };\r\n      console.log(\"data\", data);\r\n      axios\r\n        .put(\"/api/update_emp_field\", data)\r\n        .then((response) => {\r\n          console.log(\"response\", response);\r\n          const setUserObject = {\r\n            [event.target.name]: newValue,\r\n          };\r\n          dispatch(setCurrentUser(setUserObject));\r\n        })\r\n        .catch((err) => {\r\n          console.log(\"Was an error: \", err);\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      This is where employee information is displayed.\r\n      <TableContainer component={Paper}>\r\n        <Table className={styles.table} aria-label=\"reimbursement table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>Employee ID</TableCell>\r\n              <TableCell align=\"right\">\r\n                Last Name\r\n                <button name=\"lastName\" onClick={updateHandler}>\r\n                  Update\r\n                </button>\r\n              </TableCell>\r\n              <TableCell align=\"right\">\r\n                First Name\r\n                <button name=\"firstName\" onClick={updateHandler}>\r\n                  Update\r\n                </button>\r\n              </TableCell>\r\n              <TableCell align=\"right\">\r\n                Password\r\n                <button name=\"password\" onClick={updateHandler}>\r\n                  Update\r\n                </button>\r\n              </TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            <TableRow>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                {salamander.currentUser.userID}\r\n              </TableCell>\r\n              <TableCell align=\"right\">\r\n                {salamander.currentUser.lastName}\r\n              </TableCell>\r\n              <TableCell align=\"right\">\r\n                {salamander.currentUser.firstName}\r\n              </TableCell>\r\n              <TableCell align=\"right\">\r\n                {salamander.currentUser.password}\r\n              </TableCell>\r\n            </TableRow>\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmployeeInfoViewer;\r\n","import React from \"react\";\r\nimport LogoutButton from \"../components/LogoutButton/LogoutButton\";\r\nimport CreateRequestForm from \"../components/CreateRequestForm/CreateRequestForm\";\r\nimport EmployeeReimbursementTable from \"../components/ReimbursementTables/EmployeeReimbursementTable\";\r\nimport PageGreeting from \"../components/PageGreeting/PageGreeting\";\r\nimport EmployeeInfoViewer from \"../components/EmployeeInfoViewer/EmployeeInfoViewer\";\r\n\r\n\r\nconst EmployeeHome = () => {\r\n  return (\r\n    <div>\r\n      <PageGreeting />\r\n      <LogoutButton />\r\n      <CreateRequestForm />\r\n      What does a reimbursement request require?\r\n      <EmployeeReimbursementTable />\r\n      <EmployeeInfoViewer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmployeeHome;\r\n","import react, { useMemo } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst ManagerReimbursementViewer = () => {\r\n  //Gonna need to call the api\r\n  const getAllReimbursementRequestsAndSetAllReimbursementsState = () => {\r\n    axios\r\n      .get(`/api/get_all_reqs`)\r\n      .then((response) => {\r\n        console.log(\"response\", response);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"There was an error: \", error);\r\n      });\r\n  };\r\n  useMemo(() => {\r\n    console.log(\"Usememo\")\r\n    getAllReimbursementRequestsAndSetAllReimbursementsState();\r\n  }, []);\r\n  return <div></div>;\r\n};\r\n\r\nexport default ManagerReimbursementViewer;\r\n","import React from \"react\";\r\nimport PageGreeting from \"../components/PageGreeting/PageGreeting\";\r\nimport LogoutButton from \"../components/LogoutButton/LogoutButton\";\r\nimport EmployeeInfoViewer from \"../components/EmployeeInfoViewer/EmployeeInfoViewer\";\r\nimport ManagerReimbursementViewer from \"../components/ReimbursementTables/ManagerReimbursementViewer\";\r\n\r\nconst ManagerHome = () => {\r\n  return <div>\r\n    <PageGreeting />\r\n    <EmployeeInfoViewer />\r\n    <ManagerReimbursementViewer />\r\n    <LogoutButton />\r\n    This will be the Manager Home page</div>;\r\n};\r\n\r\nexport default ManagerHome;\r\n","import React from 'react'\r\n\r\nconst NoSuchUser = () => {\r\n  return (\r\n    <div>\r\n      No such user exists\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NoSuchUser\r\n","import React from 'react'\r\n\r\nconst InvalidPassword = () => {\r\n  return (\r\n    <div>\r\n      Invalid Password\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default InvalidPassword\r\n","import React from \"react\";\r\n\r\nconst Header = () => {\r\n  return <div>This will be the header.</div>;\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\nimport Welcome from \"./pages/Welcome\";\nimport Login from \"./pages/Login/Login\";\nimport EmployeeHome from \"./pages/EmployeeHome\";\nimport ManagerHome from \"./pages/ManagerHome\";\nimport NoSuchUser from \"./pages/NoSuchUser\";\nimport InvalidPassword from \"./pages/InvalidPassword\";\n\nimport \"./Salamander.module.css\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Header from \"./components/Header\";\n\nfunction Salamander() {\n  // const updateFormData = (e) => {\n  //   const fieldName = e.target.name;\n  //   const value = e.target.value;\n  //   console.log(`Updated ${fieldName} with value ${value}`);\n  //   setFormData({ ...formData, [fieldName]: value });\n  // };\n  return (\n    <Router>\n      <Header />\n      <Switch>\n        <Route exact path=\"/\">\n          <Welcome />\n        </Route>\n        <Route exact path=\"/login\">\n          <Login />\n        </Route>\n        <Route exact path=\"/employee_home\">\n          <EmployeeHome />\n        </Route>\n        <Route exact path=\"/manager_home\">\n          <ManagerHome />\n        </Route>\n        <Route exact path=\"/invalid_password\">\n          <InvalidPassword />\n        </Route>\n        <Route exact path=\"/no_such_user\">\n          <NoSuchUser />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default Salamander;\n","import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\r\nimport salamanderReducer from \"./salamanderSlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    salamander: salamanderReducer\r\n  },\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Salamander from './Salamander';\nimport { store } from './redux/store';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Salamander />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"Salamander_App__2LeMn\",\"App-logo\":\"Salamander_App-logo__3zLcd\",\"table\":\"Salamander_table__2Piwo\"};"],"sourceRoot":""}