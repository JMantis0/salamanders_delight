{"version":3,"sources":["pages/Welcome.tsx","redux/hooks.ts","redux/salamanderSlice.tsx","pages/Login.tsx","components/LogoutButton/LogoutButton.tsx","components/PageGreeting/PageGreeting.tsx","components/EmployeeInfoViewer/EmployeeInfoViewer.tsx","components/CreateRequestForm/CreateRequestForm.tsx","components/ReimbursementTables/EmployeeReimbursementTable.tsx","components/EmployeeTabs/EmployeeTabs.tsx","pages/EmployeeHome.tsx","components/ReimbursementTables/ManagerReimbursementViewer.tsx","components/ViewEmployeesTable/ViewEmployeesTable.tsx","components/ManagerTabs/ManagerTabs.tsx","pages/ManagerHome.tsx","pages/NoSuchUser.tsx","pages/InvalidPassword.tsx","Salamander.js","redux/store.ts","reportWebVitals.js","index.tsx","Salamander.module.css"],"names":["Welcome","history","useHistory","Button","color","variant","onClick","e","push","useAppDispatch","useDispatch","useAppSelector","useSelector","initialState","employeeRequestsState","loginState","userID","password","loginType","createRequestState","justification","amount","currentUser","firstName","lastName","id","timestamp","date","employeesState","allReimbursementsState","salamanderSlice","createSlice","name","reducers","setEmployeeRequestsState","state","action","payload","resetEmployeeRequestsState","setRequestFormState","console","log","fieldName","value","setLoginFormState","resetLoginFormData","setCurrentUser","resetCurrentUser","setAllReimbursementsState","resetAllReimbursementsState","setEmployeesState","resetState","actions","selectSalamander","salamander","useStyles","makeStyles","theme","root","margin","spacing","width","Login","classes","dispatch","formChangeHandler","event","target","Grid","container","alignContent","alignItems","justify","FormControl","className","component","FormLabel","TextField","autoComplete","type","label","onChange","RadioGroup","aria-label","row","FormControlLabel","control","Radio","axios","post","headers","then","response","nextURL","data","catch","err","LogoutButton","PageGreeting","Fragment","item","EmployeeInfoViewer","useMemo","get","userProfile","error","updateHandler","newValue","prompt","field","put","setUserObject","TableContainer","Paper","Table","styles","table","TableHead","TableRow","TableCell","align","TableBody","scope","CreateRequestForm","requestFormChangeHandler","placeholder","postData","requesterID","resolvedBy","status","EmployeeReimbursementTable","map","request","TabPanel","props","children","index","other","role","hidden","aria-labelledby","Box","p","Typography","a11yProps","flexGrow","backgroundColor","palette","background","paper","EmployeeTabs","React","useState","setValue","AppBar","position","Tabs","centered","tabs","Tab","EmployeeHome","ManagerReimbursementViewer","getAllReimbursementRequestsAndSetAllReimbursementsState","allReimbursements","resolutionHandler","customId","resolution","parentNode","objectId","resolver","ViewEmployeesTable","allEmployees","employee","ManagerTabs","ManagerHome","NoSuchUser","InvalidPassword","Salamander","exact","path","store","configureStore","reducer","salamanderReducer","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.cbee8fba.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Welcome = () => {\r\n  const history = useHistory();\r\n  return (\r\n    <div>\r\n      <Button color=\"primary\" variant=\"contained\" onClick={(e) => {\r\n        history.push(\"/login\");\r\n      }}>\r\n        Enter\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Welcome;\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport type { RootState, AppDispatch } from './store';\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;","import {\r\n  // createAsyncThunk,\r\n  createSlice,\r\n  //  PayloadAction\r\n} from \"@reduxjs/toolkit\";\r\nimport {\r\n  RootState,\r\n  //  AppThunk\r\n} from \"./store\";\r\n\r\nexport interface SalamanderState {\r\n  employeeRequestsState: Array<{\r\n    amount: number | null;\r\n    justification: string | null;\r\n    requesterID: string;\r\n    resolvedBy: string;\r\n    status: string;\r\n    id: { timestamp: number; date: number };\r\n    customId: string;\r\n  }>;\r\n  loginState: { userID: string; password: string; loginType: String };\r\n  createRequestState: { justification: string; amount: string | number | null };\r\n  currentUser: {\r\n    firstName: string;\r\n    lastName: string;\r\n    userID: string;\r\n    password: string;\r\n    id: { timestamp: number | null; date: number | null };\r\n  };\r\n  employeesState: Array<{\r\n    firstName: string;\r\n    lastName: string;\r\n    userID: string;\r\n    password: string;\r\n    id: { timestamp: number | null; date: number | null };\r\n  }>;\r\n  allReimbursementsState: Array<{\r\n    amount: number;\r\n    status: string;\r\n    resolvedBy: string;\r\n    requesterID: string;\r\n    justification: string;\r\n    id: { timestamp: number | null; date: number | null };\r\n    customId: string;\r\n  }>;\r\n}\r\n\r\nconst initialState: SalamanderState = {\r\n  employeeRequestsState: [],\r\n  loginState: { userID: \"\", password: \"\", loginType: \"\" },\r\n  createRequestState: { justification: \"\", amount: \"\" },\r\n  currentUser: {\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    userID: \"\",\r\n    password: \"\",\r\n    id: { timestamp: null, date: null },\r\n  },\r\n  employeesState: [],\r\n  allReimbursementsState: [],\r\n};\r\n\r\nexport const salamanderSlice = createSlice({\r\n  name: \"salamander\",\r\n  initialState,\r\n  reducers: {\r\n    setEmployeeRequestsState: (state, action) => {\r\n      state.employeeRequestsState = action.payload;\r\n    },\r\n    resetEmployeeRequestsState: (state) => {\r\n      state.employeeRequestsState = [];\r\n    },\r\n    setRequestFormState: (state, action) => {\r\n      console.log(\"action\", action);\r\n      const fieldName = action.payload.fieldName;\r\n      const value = action.payload.value;\r\n      console.log(`updating ${fieldName} to ${value}`);\r\n      state.createRequestState = {\r\n        ...state.createRequestState,\r\n        [fieldName]: value,\r\n      };\r\n    },\r\n    setLoginFormState: (state, action) => {\r\n      console.log(\"action\", action);\r\n      const fieldName = action.payload.fieldName;\r\n      const value = action.payload.value;\r\n      console.log(`updating ${fieldName} to ${value}`);\r\n      state.loginState = { ...state.loginState, [fieldName]: value };\r\n    },\r\n    resetLoginFormData: (state) => {\r\n      state.loginState.userID = \"\";\r\n      state.loginState.password = \"\";\r\n      state.loginState.loginType = \"\";\r\n    },\r\n    setCurrentUser: (state, action) => {\r\n      console.log(\"action\", action);\r\n      console.log(\"action.payload\", action.payload);\r\n      state.currentUser = { ...state.currentUser, ...action.payload };\r\n    },\r\n    resetCurrentUser: (state) => {\r\n      state.currentUser = {\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        userID: \"\",\r\n        password: \"\",\r\n        id: { timestamp: null, date: null },\r\n      };\r\n    },\r\n    setAllReimbursementsState: (state, action) => {\r\n      state.allReimbursementsState = [...action.payload];\r\n    },\r\n    resetAllReimbursementsState: (state) => {\r\n      state.allReimbursementsState = [];\r\n    },\r\n    setEmployeesState: (state, action) => {\r\n      state.employeesState = [...action.payload];\r\n    },\r\n    resetState: (state) => {\r\n      state = initialState;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  setEmployeeRequestsState,\r\n  resetEmployeeRequestsState,\r\n  setRequestFormState,\r\n  setLoginFormState,\r\n  resetLoginFormData,\r\n  setCurrentUser,\r\n  resetCurrentUser,\r\n  setAllReimbursementsState,\r\n  resetAllReimbursementsState,\r\n  resetState,\r\n  setEmployeesState,\r\n} = salamanderSlice.actions;\r\n\r\nexport const selectSalamander = (state: RootState) => state.salamander;\r\n\r\nexport default salamanderSlice.reducer;\r\n","import React from \"react\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { useAppSelector, useAppDispatch } from \"../redux/hooks\";\r\nimport {\r\n  resetLoginFormData,\r\n  setLoginFormState,\r\n  selectSalamander,\r\n} from \"../redux/salamanderSlice\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport axios from \"axios\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n      width: \"25ch\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst Login = () => {\r\n  const classes = useStyles();\r\n  const salamander = useAppSelector(selectSalamander);\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  const formChangeHandler = (event: any) => {\r\n    console.log(event);\r\n    const fieldName = event.target.name;\r\n    const value = event.target.value;\r\n    dispatch(setLoginFormState({ fieldName, value }));\r\n  };\r\n\r\n  const submitLogin = () => {\r\n    console.log(\"login\", salamander.loginState);\r\n    console.log(\r\n      \"Calling Login Servlet with login object: \",\r\n      salamander.loginState\r\n    );\r\n    axios\r\n      .post(\"/api/attempt_login\", salamander.loginState, {\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n      })\r\n      .then((response) => {\r\n        const nextURL = response.data;\r\n        history.push(nextURL);\r\n      })\r\n      .catch((err) => {\r\n        const nextURL = err.response.data;\r\n        dispatch(resetLoginFormData());\r\n        history.push(nextURL);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      alignContent=\"space-between\"\r\n      alignItems=\"center\"\r\n      justify=\"center\"\r\n    >\r\n      <Grid\r\n        container\r\n        alignContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        justify=\"center\"\r\n      >\r\n        <h1>SALAMANDER REIMBURSEMENT MATRIX</h1>\r\n      </Grid>\r\n      <FormControl className={classes.root} component=\"fieldset\">\r\n        <FormLabel component=\"legend\">Login</FormLabel>\r\n        <TextField\r\n          autoComplete=\"off\"\r\n          type=\"text\"\r\n          label=\"User ID\"\r\n          variant=\"outlined\"\r\n          name=\"userID\"\r\n          onChange={formChangeHandler}\r\n        />\r\n        <TextField\r\n          autoComplete=\"off\"\r\n          type=\"password\"\r\n          label=\"Password\"\r\n          variant=\"outlined\"\r\n          name=\"password\"\r\n          onChange={formChangeHandler}\r\n        />\r\n        <RadioGroup\r\n          aria-label=\"gender\"\r\n          name=\"loginType\"\r\n          row\r\n          value={salamander.loginState.loginType}\r\n          onChange={formChangeHandler}\r\n        >\r\n          <FormControlLabel\r\n            value=\"employee\"\r\n            control={<Radio />}\r\n            label=\"Employee\"\r\n          />\r\n          <FormControlLabel\r\n            value=\"manager\"\r\n            control={<Radio />}\r\n            label=\"Manager\"\r\n          />\r\n        </RadioGroup>\r\n        <Button color=\"primary\" variant=\"contained\" onClick={submitLogin}>\r\n          Submit\r\n        </Button>\r\n      </FormControl>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport{ resetState, resetLoginFormData, resetEmployeeRequestsState, resetCurrentUser } from \"../../redux/salamanderSlice\";\r\nimport { useAppDispatch } from \"../../redux/hooks\";\r\n\r\nconst LogoutButton = () => {\r\n  const history = useHistory();\r\n  const dispatch = useAppDispatch();\r\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n     //  Reset currently logged in user State\r\n     dispatch(resetState());\r\n    history.push(\"/\");\r\n  };\r\n  return (\r\n    <div>\r\n      <Button\r\n        onClick={(e) => {\r\n          handleClick(e);\r\n        }}\r\n      >\r\n        Log Out\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LogoutButton;\r\n","import react from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { selectSalamander } from \"../../redux/salamanderSlice\";\r\nimport { useAppSelector } from \"../../redux/hooks\";\r\nimport LogoutButton from \"../LogoutButton/LogoutButton\";\r\nimport React from \"react\";\r\nconst PageGreeting = () => {\r\n  const salamander = useAppSelector(selectSalamander);\r\n  return (\r\n    <React.Fragment>\r\n      <Grid\r\n        alignContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        justify=\"center\"\r\n        container\r\n      >\r\n        <Grid item>\r\n          <h1>Welcome, {salamander.currentUser.firstName}.</h1>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid\r\n        container\r\n        alignContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        justify=\"center\"\r\n      >\r\n        <LogoutButton />\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default PageGreeting;\r\n","import react, { MouseEventHandler, useMemo } from \"react\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport axios from \"axios\";\r\nimport { selectSalamander, setCurrentUser } from \"../../redux/salamanderSlice\";\r\nimport { useAppDispatch, useAppSelector } from \"../../redux/hooks\";\r\nimport styles from \"../../Salamander.module.css\";\r\n\r\nconst EmployeeInfoViewer = () => {\r\n  const salamander = useAppSelector(selectSalamander);\r\n  const dispatch = useAppDispatch();\r\n\r\n  const getCurrentUserAndSetCurrentUserState = () => {\r\n    axios\r\n      .get(`/api/current_user?userID=${salamander.loginState.userID}&loginType=${salamander.loginState.loginType}`)\r\n      .then((response) => {\r\n        console.log(\"response\", response);\r\n        const userProfile = response.data;\r\n        dispatch(setCurrentUser(userProfile));\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"There was an error: \", error);\r\n      });\r\n  };\r\n\r\n  useMemo(() => {\r\n    getCurrentUserAndSetCurrentUserState();\r\n  }, []);\r\n\r\n  const updateHandler = (event: any) => {\r\n    console.log(event);\r\n    const newValue = prompt(`Submit a new ${event.target.name}`);\r\n    if (newValue) {\r\n      const data = {\r\n        userID: salamander.currentUser.userID,\r\n        field: event.target.name,\r\n        value: newValue,\r\n      };\r\n      console.log(\"data\", data);\r\n      axios\r\n        .put(\"/api/update_emp_field\", data)\r\n        .then((response) => {\r\n          console.log(\"response\", response);\r\n          const setUserObject = {\r\n            [event.target.name]: newValue,\r\n          };\r\n          dispatch(setCurrentUser(setUserObject));\r\n        })\r\n        .catch((err) => {\r\n          console.log(\"Was an error: \", err);\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <TableContainer component={Paper}>\r\n        <Table className={styles.table} aria-label=\"reimbursement table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>User ID</TableCell>\r\n              <TableCell align=\"right\">\r\n                Last Name\r\n                <button name=\"lastName\" onClick={updateHandler}>\r\n                  Update\r\n                </button>\r\n              </TableCell>\r\n              <TableCell align=\"right\">\r\n                First Name\r\n                <button name=\"firstName\" onClick={updateHandler}>\r\n                  Update\r\n                </button>\r\n              </TableCell>\r\n              <TableCell align=\"right\">\r\n                Password\r\n                <button name=\"password\" onClick={updateHandler}>\r\n                  Update\r\n                </button>\r\n              </TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            <TableRow>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                {salamander.currentUser.userID}\r\n              </TableCell>\r\n              <TableCell align=\"right\">\r\n                {salamander.currentUser.lastName}\r\n              </TableCell>\r\n              <TableCell align=\"right\">\r\n                {salamander.currentUser.firstName}\r\n              </TableCell>\r\n              <TableCell align=\"right\">\r\n                {salamander.currentUser.password}\r\n              </TableCell>\r\n            </TableRow>\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmployeeInfoViewer;\r\n","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {\r\n  setRequestFormState,\r\n  selectSalamander,\r\n  setEmployeeRequestsState,\r\n} from \"../../redux/salamanderSlice\";\r\nimport { useAppSelector, useAppDispatch } from \"../../redux/hooks\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport axios from \"axios\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n      width: \"25ch\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst CreateRequestForm = () => {\r\n  const classes = useStyles();\r\n  const salamander = useAppSelector(selectSalamander);\r\n  const dispatch = useAppDispatch();\r\n\r\n  const requestFormChangeHandler = (event: {\r\n    target: { name: any; value: any };\r\n  }) => {\r\n    const fieldName = event.target.name;\r\n    const value = event.target.value;\r\n    console.log(`the value of ${fieldName} is now ${value}`);\r\n    dispatch(setRequestFormState({ fieldName, value }));\r\n  };\r\n\r\n  const submitNewRequest = () => {\r\n    console.log(\"salamander.loginState\", salamander.loginState);\r\n    console.log(\r\n      \"calling /create_new_request with data: \",\r\n      salamander.createRequestState\r\n    );\r\n    const postData = {\r\n      requesterID: salamander.loginState.userID,\r\n      justification: salamander.createRequestState.justification,\r\n      amount: salamander.createRequestState.amount,\r\n      resolvedBy: null,\r\n      status: \"Pending\",\r\n    };\r\n    axios\r\n      .post(\"/api/create_new_request\", postData)\r\n      .then((response) => {\r\n        console.log(\"response.data\", response.data);\r\n        dispatch(\r\n          setRequestFormState({ fieldName: \"justification\", value: \"\" })\r\n        );\r\n        dispatch(setRequestFormState({ fieldName: \"amount\", value: \"\" }));\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"There was an error\", err);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form className={classes.root}>\r\n        <TextField\r\n          autoComplete=\"off\"\r\n          type=\"text\"\r\n          label=\"Justification\"\r\n          variant=\"outlined\"\r\n          name=\"justification\"\r\n          value={salamander.createRequestState.justification}\r\n          onChange={requestFormChangeHandler}\r\n        />\r\n        <TextField\r\n          autoComplete=\"off\"\r\n          type=\"number\"\r\n          label=\"Amount\"\r\n          variant=\"outlined\"\r\n          name=\"amount\"\r\n          placeholder=\"in USD\"\r\n          value={salamander.createRequestState.amount}\r\n          onChange={requestFormChangeHandler}\r\n        />\r\n        <Button onClick={submitNewRequest}>Submit</Button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateRequestForm;\r\n","import React, { useMemo } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport axios from \"axios\";\r\nimport {\r\n  setEmployeeRequestsState,\r\n  selectSalamander,\r\n} from \"../../redux/salamanderSlice\";\r\nimport { useAppSelector, useAppDispatch } from \"../../redux/hooks\";\r\nimport styles from \"../../Salamander.module.css\";\r\n\r\nconst EmployeeReimbursementTable = () => {\r\n  const salamander = useAppSelector(selectSalamander);\r\n  const dispatch = useAppDispatch();\r\n\r\n  const getAllReimbursementRequestsForCurrentUser = () => {\r\n    axios\r\n      .get(`/api/get_requests?userID=${salamander.loginState.userID}`)\r\n      .then((response) => {\r\n        console.log(\"response.data\", response.data);\r\n        dispatch(setEmployeeRequestsState(response.data));\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"there was an error: \", err.response);\r\n      });\r\n  };\r\n\r\n  useMemo(() => {\r\n    getAllReimbursementRequestsForCurrentUser();\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <TableContainer component={Paper}>\r\n        <Table className={styles.table} aria-label=\"reimbursement table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>Justification</TableCell>\r\n              <TableCell align=\"right\">Amount</TableCell>\r\n              <TableCell align=\"right\">Status</TableCell>\r\n              <TableCell align=\"right\">Resolved By</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {salamander.employeeRequestsState.map((request) => (\r\n              <TableRow key={request.id.timestamp}>\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                  {request.justification}\r\n                </TableCell>\r\n                <TableCell align=\"right\">{request.amount}</TableCell>\r\n                <TableCell align=\"right\">{request.status}</TableCell>\r\n                <TableCell align=\"right\">\r\n                  {request.resolvedBy ? request.resolvedBy : \"Unresolved\"}\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default EmployeeReimbursementTable;\r\n","import React from \"react\";\r\nimport EmployeeInfoViewer from \"../EmployeeInfoViewer/EmployeeInfoViewer\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport CreateRequestForm from \"../CreateRequestForm/CreateRequestForm\";\r\nimport EmployeeReimbursementTable from \"../ReimbursementTables/EmployeeReimbursementTable\";\r\nimport styles from \"../../Salamander.module.css\";\r\nconst EmployeeTabs = () => {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleTabChange = (event: any, newValue: any) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Tabs\r\n          centered={true}\r\n          className={styles.tabs}\r\n          value={value}\r\n          onChange={handleTabChange}\r\n          aria-label=\"simple tabs example\"\r\n        >\r\n          <Tab label=\"Your Profile\" {...a11yProps(0)} />\r\n          <Tab label=\"Submit New Request\" {...a11yProps(1)} />\r\n          <Tab label=\"Your Requests\" {...a11yProps(2)} />\r\n        </Tabs>\r\n      </AppBar>\r\n      <TabPanel value={value} index={0}>\r\n        <EmployeeInfoViewer />\r\n      </TabPanel>\r\n      <TabPanel value={value} index={1}>\r\n        <CreateRequestForm />\r\n      </TabPanel>\r\n      <TabPanel value={value} index={2}>\r\n        <EmployeeReimbursementTable />\r\n      </TabPanel>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction TabPanel(props: any) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`simple-tabpanel-${index}`}\r\n      aria-labelledby={`simple-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box p={3}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index: any) {\r\n  return {\r\n    id: `simple-tab-${index}`,\r\n    \"aria-controls\": `simple-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n}));\r\n\r\nexport default EmployeeTabs;\r\n","import React from \"react\";\r\nimport PageGreeting from \"../components/PageGreeting/PageGreeting\";\r\nimport EmployeeTabs from \"../components/EmployeeTabs/EmployeeTabs\";\r\n\r\nconst EmployeeHome = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <PageGreeting />\r\n      <EmployeeTabs />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default EmployeeHome;\r\n","import React, { useMemo } from \"react\";\r\nimport axios from \"axios\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Table from \"@material-ui/core/Table\";\r\n\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport styles from \"../../Salamander.module.css\";\r\nimport { useAppDispatch, useAppSelector } from \"../../redux/hooks\";\r\nimport {\r\n  selectSalamander,\r\n  setAllReimbursementsState,\r\n} from \"../../redux/salamanderSlice\";\r\n\r\nconst ManagerReimbursementViewer = () => {\r\n  const salamander = useAppSelector(selectSalamander);\r\n  const dispatch = useAppDispatch();\r\n  const getAllReimbursementRequestsAndSetAllReimbursementsState = () => {\r\n    axios\r\n      .get(`/api/get_all_reqs`)\r\n      .then((response) => {\r\n        console.log(\"response\", response);\r\n        const allReimbursements = response.data;\r\n        dispatch(setAllReimbursementsState(allReimbursements));\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"There was an error: \", error);\r\n      });\r\n  };\r\n  useMemo(() => {\r\n    getAllReimbursementRequestsAndSetAllReimbursementsState();\r\n  }, []);\r\n\r\n  const resolutionHandler = (event: any, customId: string) => {\r\n    console.log(\"event\", event);\r\n    let resolution: string = \"something\";\r\n    if (\r\n      event.target.className ===\r\n      \"MuiButtonBase-root MuiButton-root MuiButton-text\"\r\n    ) {\r\n      console.log(\"You clicked on the edge.\");\r\n      resolution = event.target.name;\r\n      console.log(\"resolution: \", resolution);\r\n    } else if (event.target.className === \"MuiButton-label\") {\r\n      console.log(\"You clicked on the label\");\r\n      resolution = event.target.parentNode.name;\r\n      console.log(\"resolution: \", resolution);\r\n    }\r\n    const data = {\r\n      resolution,\r\n      objectId: customId,\r\n      resolver: `${salamander.currentUser.firstName} ${salamander.currentUser.lastName} (${salamander.currentUser.userID})`,\r\n    };\r\n    axios\r\n      .put(\"/api/resolve_request\", data)\r\n      .then((response) => {\r\n        console.log(\"response\", response);\r\n        getAllReimbursementRequestsAndSetAllReimbursementsState();\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"There was an error: \", err);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <React.Fragment>\r\n        <TableContainer component={Paper}>\r\n          <Table className={styles.table} aria-label=\"reimbursement table\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Requested By</TableCell>\r\n                <TableCell align=\"right\">Justification</TableCell>\r\n                <TableCell align=\"right\">Amount</TableCell>\r\n                <TableCell align=\"right\">Status</TableCell>\r\n                <TableCell align=\"right\">Resolved By</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {salamander.allReimbursementsState.map((request) => (\r\n                <TableRow key={request.id.timestamp}>\r\n                  <TableCell component=\"th\" scope=\"row\">\r\n                    {request.requesterID}\r\n                  </TableCell>\r\n                  <TableCell align=\"right\">{request.justification}</TableCell>\r\n                  <TableCell align=\"right\">{request.amount}</TableCell>\r\n                  <TableCell align=\"right\">\r\n                    {request.status === \"Pending\" ? (\r\n                      <React.Fragment>\r\n                        <Button\r\n                          name=\"Approved\"\r\n                          onClick={(event) => {\r\n                            resolutionHandler(event, request.customId);\r\n                          }}\r\n                        >\r\n                          Approve\r\n                        </Button>\r\n                        <Button\r\n                          name=\"Denied\"\r\n                          onClick={(event) => {\r\n                            resolutionHandler(event, request.customId);\r\n                          }}\r\n                        >\r\n                          {\" \"}\r\n                          Deny\r\n                        </Button>\r\n                      </React.Fragment>\r\n                    ) : (\r\n                      request.status\r\n                    )}\r\n                  </TableCell>\r\n                  <TableCell align=\"right\">\r\n                    {request.resolvedBy ? request.resolvedBy : \"Unresolved\"}\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </React.Fragment>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ManagerReimbursementViewer;\r\n","import React, { useMemo } from \"react\";\r\nimport { useAppSelector, useAppDispatch } from \"../../redux/hooks\";\r\nimport {\r\n  setEmployeesState,\r\n  selectSalamander,\r\n} from \"../../redux/salamanderSlice\";\r\nimport axios from \"axios\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport styles from \"../../Salamander.module.css\";\r\n\r\nconst ViewEmployeesTable = () => {\r\n  const salamander = useAppSelector(selectSalamander);\r\n  const dispatch = useAppDispatch();\r\n\r\n  const getAllEmployeesAndSetEmployeesState = () => {\r\n    axios\r\n      .get(\"/api/get_all_employees\")\r\n      .then((response) => {\r\n        console.log(\"response: \", response);\r\n        const allEmployees = response.data;\r\n        dispatch(setEmployeesState(allEmployees));\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"There was an error: \", error);\r\n      });\r\n  };\r\n\r\n  useMemo(() => {\r\n    getAllEmployeesAndSetEmployeesState();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <TableContainer component={Paper}>\r\n        <Table className={styles.table} aria-label=\"reimbursement table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>Employee ID</TableCell>\r\n              <TableCell align=\"right\">First Name</TableCell>\r\n              <TableCell align=\"right\">Last Name</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {salamander.employeesState.map((employee) => (\r\n              <TableRow key={employee.id.timestamp}>\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                  {employee.userID}\r\n                </TableCell>\r\n                <TableCell align=\"right\">{employee.firstName}</TableCell>\r\n                <TableCell align=\"right\">{employee.lastName}</TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ViewEmployeesTable;\r\n","import React from \"react\";\r\nimport EmployeeInfoViewer from \"../EmployeeInfoViewer/EmployeeInfoViewer\";\r\nimport ManagerReimbursementViewer from \"../ReimbursementTables/ManagerReimbursementViewer\";\r\nimport ViewEmployeesTable from \"../ViewEmployeesTable/ViewEmployeesTable\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nconst ManagerTabs = () => {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleTabChange = (event: any, newValue: any) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Tabs\r\n          value={value}\r\n          onChange={handleTabChange}\r\n          aria-label=\"simple tabs example\"\r\n        >\r\n              <Tab label=\"Your Profile\" {...a11yProps(0)} />\r\n              <Tab label=\"All Employees\" {...a11yProps(1)} />\r\n              <Tab label=\"All Requests\" {...a11yProps(2)} />\r\n        </Tabs>\r\n      </AppBar>\r\n      <TabPanel value={value} index={0}>\r\n        <EmployeeInfoViewer />\r\n      </TabPanel>\r\n      <TabPanel value={value} index={1}>\r\n        <ViewEmployeesTable />\r\n      </TabPanel>\r\n      <TabPanel value={value} index={2}>\r\n        <ManagerReimbursementViewer />\r\n      </TabPanel>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction TabPanel(props: any) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`simple-tabpanel-${index}`}\r\n      aria-labelledby={`simple-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box p={3}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index: any) {\r\n  return {\r\n    id: `simple-tab-${index}`,\r\n    \"aria-controls\": `simple-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n}));\r\n\r\nexport default ManagerTabs;\r\n","import React from \"react\";\r\nimport PageGreeting from \"../components/PageGreeting/PageGreeting\";\r\nimport LogoutButton from \"../components/LogoutButton/LogoutButton\";\r\nimport ManagerTabs from \"../components/ManagerTabs/ManagerTabs\";\r\n\r\nconst ManagerHome = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <PageGreeting />\r\n      <ManagerTabs />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ManagerHome;\r\n","import React from 'react'\r\n\r\nconst NoSuchUser = () => {\r\n  return (\r\n    <div>\r\n      No such user exists\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NoSuchUser\r\n","import React from 'react'\r\n\r\nconst InvalidPassword = () => {\r\n  return (\r\n    <div>\r\n      Invalid Password\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default InvalidPassword\r\n","import React from \"react\";\nimport Welcome from \"./pages/Welcome\";\nimport Login from \"./pages/Login\";\nimport EmployeeHome from \"./pages/EmployeeHome\";\nimport ManagerHome from \"./pages/ManagerHome\";\nimport NoSuchUser from \"./pages/NoSuchUser\";\nimport InvalidPassword from \"./pages/InvalidPassword\";\n\nimport \"./Salamander.module.css\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\n\nfunction Salamander() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <Welcome />\n        </Route>\n        <Route exact path=\"/login\">\n          <Login />\n        </Route>\n        <Route exact path=\"/employee_home\">\n          <EmployeeHome />\n        </Route>\n        <Route exact path=\"/manager_home\">\n          <ManagerHome />\n        </Route>\n        <Route exact path=\"/invalid_password\">\n          <InvalidPassword />\n        </Route>\n        <Route exact path=\"/no_such_user\">\n          <NoSuchUser />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default Salamander;\n","import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\r\nimport salamanderReducer from \"./salamanderSlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    salamander: salamanderReducer\r\n  },\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Salamander from './Salamander';\nimport { store } from './redux/store';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Salamander />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"Salamander_App__2LeMn\",\"App-logo\":\"Salamander_App-logo__3zLcd\",\"table\":\"Salamander_table__2Piwo\",\"tabs\":\"Salamander_tabs__87wE7\"};"],"sourceRoot":""}