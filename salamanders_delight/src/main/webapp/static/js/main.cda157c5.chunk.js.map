{"version":3,"sources":["pages/Welcome.tsx","redux/hooks.ts","redux/salamanderSlice.tsx","pages/Login/Login.tsx","components/LogoutButton/LogoutButton.tsx","components/CreateRequestForm/CreateRequestForm.tsx","components/ReimbursementTable/ReimbursementTable.tsx","components/PageGreeting/PageGreeting.tsx","components/EmployeeInfoViewer/EmployeeInfoViewer.tsx","pages/EmployeeHome.tsx","pages/ManagerHome.tsx","pages/NoSuchUser.tsx","pages/InvalidPassword.tsx","components/Header.tsx","Salamander.js","redux/store.ts","reportWebVitals.js","index.tsx","Salamander.module.css"],"names":["Welcome","history","useHistory","Button","color","variant","onClick","e","push","useAppDispatch","useDispatch","useAppSelector","useSelector","salamanderSlice","createSlice","name","initialState","requestsState","loginState","empID","password","createRequestState","justification","amount","currentUser","firstName","lastName","reducers","updateAllRequests","state","action","payload","resetEmployeeRequests","setRequestFormState","console","log","fieldName","value","setLoginFormState","resetLoginFormData","setCurrentUser","actions","selectSalamander","salamander","useStyles","makeStyles","theme","root","margin","spacing","width","Login","classes","dispatch","formChangeHandler","event","target","className","noValidate","autoComplete","TextField","type","label","onChange","axios","post","headers","then","response","nextURL","data","catch","err","LogoutButton","CreateRequestForm","requestFormChangeHandler","placeholder","postData","requesterID","get","ReimbursementTable","useMemo","Fragment","TableContainer","component","Paper","Table","styles","table","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","request","scope","resolved","id","timestamp","PageGreeting","EmployeeInfoViewer","error","EmployeeHome","ManagerHome","NoSuchUser","InvalidPassword","Header","Salamander","exact","path","store","configureStore","reducer","salamanderReducer","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.cda157c5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Welcome = () => {\r\n  const history = useHistory();\r\n  return (\r\n    <div>\r\n      This will be the home page\r\n      <Button color=\"primary\" variant=\"contained\" onClick={(e) => {\r\n        history.push(\"/login\");\r\n      }}>\r\n        Enter\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Welcome;\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport type { RootState, AppDispatch } from './store';\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { RootState, AppThunk } from \"./store\";\r\n\r\nexport interface SalamanderState {\r\n  requestsState: Array<{\r\n    amount: number;\r\n    justification: string | null;\r\n    requesterID: string;\r\n    resolved: boolean;\r\n    id: { timestamp: number; date: number };\r\n  }>;\r\n  loginState: { empID: String; password: String };\r\n  createRequestState: { justification: String; amount: String };\r\n  currentUser: {\r\n    firstName: string;\r\n    lastName: string;\r\n    empID: string;\r\n    password: string;\r\n  }\r\n}\r\n\r\nconst initialState: SalamanderState = {\r\n  requestsState: [],\r\n  loginState: { empID: \"\", password: \"\" },\r\n  createRequestState: { justification: \"\", amount: \"0\" },\r\n  currentUser: {\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    empID: \"\",\r\n    password: \"\"\r\n  }\r\n};\r\n\r\nexport const salamanderSlice = createSlice({\r\n  name: \"salamander\",\r\n  initialState,\r\n  reducers: {\r\n    updateAllRequests: (state, action) => {\r\n      state.requestsState = action.payload;\r\n    },\r\n    resetEmployeeRequests: (state) => {\r\n      state.requestsState = [];\r\n    },\r\n    setRequestFormState: (state, action) => {\r\n      console.log(\"action\", action);\r\n      const fieldName = action.payload.fieldName;\r\n      const value = action.payload.value;\r\n      console.log(`updating ${fieldName} to ${value}`);\r\n      state.createRequestState = {\r\n        ...state.createRequestState,\r\n        [fieldName]: value,\r\n      };\r\n    },\r\n    setLoginFormState: (state, action) => {\r\n      console.log(\"action\", action);\r\n      const fieldName = action.payload.fieldName;\r\n      const value = action.payload.value;\r\n      console.log(`updating ${fieldName} to ${value}`);\r\n      state.loginState = { ...state.loginState, [fieldName]: value };\r\n    },\r\n    resetLoginFormData: (state) => {\r\n      state.loginState.empID = \"\";\r\n      state.loginState.password = \"\";\r\n    },\r\n    setCurrentUser: (state, action) => {\r\n      console.log(\"action\", action);\r\n      // state.currentUser = {...state.currentUser, }\r\n      \r\n    }\r\n  },\r\n});\r\n\r\nexport const {\r\n  updateAllRequests,\r\n  resetEmployeeRequests,\r\n  setRequestFormState,\r\n  setLoginFormState,\r\n  resetLoginFormData,\r\n  setCurrentUser\r\n} = salamanderSlice.actions;\r\n\r\nexport const selectSalamander = (state: RootState) => state.salamander;\r\n\r\nexport default salamanderSlice.reducer;\r\n","import React from \"react\";\r\nimport { useAppSelector, useAppDispatch } from \"../../redux/hooks\";\r\nimport {resetLoginFormData, setLoginFormState, selectSalamander } from \"../../redux/salamanderSlice\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport axios from \"axios\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n      width: \"25ch\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst Login = () => {\r\n  const classes = useStyles();\r\n  const salamander = useAppSelector(selectSalamander);\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n  const formChangeHandler = (event: { target: { name: any; value: any; }; }) => {\r\n    const fieldName = event.target.name;\r\n    const value = event.target.value;\r\n    dispatch(setLoginFormState({fieldName, value}));\r\n  };\r\n\r\n  const submitLogin = () => {\r\n    console.log(\"login\", salamander.loginState);\r\n    console.log(\"Calling Login Servlet with login object: \", salamander.loginState);\r\n    axios\r\n      .post(\"/api/attempt_login\", salamander.loginState, {\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n      })\r\n      .then((response) => {\r\n        const nextURL = response.data;\r\n        history.push(nextURL);\r\n      })\r\n      .catch((err) => {\r\n        const nextURL = err.response.data;\r\n        dispatch(resetLoginFormData());\r\n        history.push(nextURL);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      This will be the login page\r\n      <form className={classes.root} noValidate autoComplete=\"off\">\r\n        <TextField\r\n          autoComplete=\"off\"\r\n          type=\"text\"\r\n          label=\"Employee ID\"\r\n          variant=\"outlined\"\r\n          name=\"empID\"\r\n          onChange={formChangeHandler}\r\n        />\r\n        <TextField\r\n          autoComplete=\"off\"\r\n          type=\"password\"\r\n          label=\"Password\"\r\n          variant=\"outlined\"\r\n          name=\"password\"\r\n          onChange={formChangeHandler}\r\n        />\r\n        <Button color=\"primary\" variant=\"contained\" onClick={submitLogin}>\r\n          Submit\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport{ resetLoginFormData, resetEmployeeRequests } from \"../../redux/salamanderSlice\";\r\nimport { useAppDispatch } from \"../../redux/hooks\";\r\n\r\nconst LogoutButton = () => {\r\n  const history = useHistory();\r\n  const dispatch = useAppDispatch();\r\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n     //  Reset currently logged in user State\r\n     dispatch(resetLoginFormData());\r\n     dispatch(resetEmployeeRequests());\r\n    history.push(\"/\");\r\n  };\r\n  return (\r\n    <div>\r\n      <Button\r\n        onClick={(e) => {\r\n          handleClick(e);\r\n        }}\r\n      >\r\n        Log Out\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LogoutButton;\r\n","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {\r\n  setRequestFormState,\r\n  selectSalamander,\r\n  updateAllRequests,\r\n} from \"../../redux/salamanderSlice\";\r\nimport { useAppSelector, useAppDispatch } from \"../../redux/hooks\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport axios from \"axios\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n      width: \"25ch\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst CreateRequestForm = () => {\r\n  const classes = useStyles();\r\n  const salamander = useAppSelector(selectSalamander);\r\n  const dispatch = useAppDispatch();\r\n\r\n  const requestFormChangeHandler = (event: {\r\n    target: { name: any; value: any };\r\n  }) => {\r\n    const fieldName = event.target.name;\r\n    const value = event.target.value;\r\n    console.log(`the value of ${fieldName} is now ${value}`);\r\n    dispatch(setRequestFormState({ fieldName, value }));\r\n  };\r\n\r\n  const getAllReimbursementRequestsForCurrentUser = () => {\r\n    axios\r\n      .get(`/api/get_requests?empID=${salamander.loginState.empID}`)\r\n      .then((response) => {\r\n        console.log(\"response.data\", response.data);\r\n        dispatch(updateAllRequests(response.data));\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"there was an error: \", err.response);\r\n      });\r\n  };\r\n\r\n  const submitNewRequest = () => {\r\n    // I want to call the servlet that makes a new request.\r\n    console.log(\"salamander.loginState\", salamander.loginState)\r\n    console.log(\"calling /create_new_request with data: \", salamander.createRequestState);\r\n    const postData = {\r\n      requesterID: salamander.loginState.empID,\r\n      justification: salamander.createRequestState.justification,\r\n      amount: salamander.createRequestState.amount\r\n    }\r\n    axios\r\n      .post(\"/api/create_new_request\", postData)\r\n      .then((response) => {\r\n      \r\n        console.log(\"response.data\", response.data);\r\n        getAllReimbursementRequestsForCurrentUser();\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"There was an error\", err);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form className={classes.root}>\r\n        <TextField\r\n          autoComplete=\"off\"\r\n          type=\"text\"\r\n          label=\"Justification\"\r\n          variant=\"outlined\"\r\n          name=\"justification\"\r\n          onChange={requestFormChangeHandler}\r\n        />\r\n        <TextField\r\n          autoComplete=\"off\"\r\n          type=\"number\"\r\n          label=\"Amount\"\r\n          variant=\"outlined\"\r\n          name=\"amount\"\r\n          placeholder=\"in USD\"\r\n          onChange={requestFormChangeHandler}\r\n        />\r\n        <Button onClick={submitNewRequest}>Submit</Button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateRequestForm;\r\n","import React, { useMemo } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport axios from \"axios\";\r\nimport { updateAllRequests, selectSalamander} from \"../../redux/salamanderSlice\";\r\nimport { useAppSelector, useAppDispatch } from \"../../redux/hooks\";\r\nimport styles from \"../../Salamander.module.css\";\r\n\r\nconst ReimbursementTable = () => {\r\n  const salamander = useAppSelector(selectSalamander);\r\n  const dispatch = useAppDispatch();\r\n  \r\n  const getAllReimbursementRequestsForCurrentUser = () => {\r\n    axios\r\n      .get(`/api/get_requests?empID=${salamander.loginState.empID}`)\r\n      .then((response) => {\r\n        console.log(\"response.data\", response.data);\r\n        dispatch(updateAllRequests(response.data));\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"there was an error: \", err.response);\r\n      });\r\n  };\r\n  \r\n  useMemo(() => {\r\n    getAllReimbursementRequestsForCurrentUser();\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>     \r\n      <TableContainer component={Paper}>\r\n        <Table className={styles.table} aria-label=\"reimbursement table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>Justification</TableCell>\r\n              <TableCell align=\"right\">Amount</TableCell>\r\n              <TableCell align=\"right\">Status</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {salamander.requestsState.map((request) => (\r\n              <TableRow key={request.id.timestamp}>\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                  {request.justification}\r\n                </TableCell>\r\n                <TableCell align=\"right\">{request.amount}</TableCell>\r\n                <TableCell align=\"right\">\r\n                  {request.resolved ? \"Resolved\" : \"Pending\"}\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ReimbursementTable;\r\n","import react from \"react\";\r\nimport { selectSalamander } from \"../../redux/salamanderSlice\";\r\nimport { useAppSelector } from \"../../redux/hooks\";\r\n\r\nconst PageGreeting = () => {\r\n  const salamander = useAppSelector(selectSalamander);\r\n  return <h1>Welcome, {salamander.loginState.empID}.</h1>;\r\n};\r\n\r\nexport default PageGreeting;\r\n","import react, { useMemo } from \"react\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport axios from \"axios\";\r\nimport { selectSalamander, setCurrentUser } from \"../../redux/salamanderSlice\";\r\nimport { useAppDispatch, useAppSelector } from \"../../redux/hooks\";\r\nimport styles from \"../../Salamander.module.css\";\r\n\r\nconst EmployeeInfoViewer = () => {\r\n  const salamander = useAppSelector(selectSalamander);\r\n  const dispatch = useAppDispatch();\r\n\r\n  const getCurrentUserAndSetCurrentUserState = () => {\r\n    axios\r\n    .get(`/api/current_user?empID=${salamander.loginState.empID}`)\r\n    .then((response) => {\r\n      console.log(\"response\", response);\r\n      dispatch(setCurrentUser);\r\n    })\r\n    .catch((error) => {\r\n      console.log(\"There was an error: \", error);\r\n    });\r\n  }\r\n\r\n  useMemo(() => {\r\n   getCurrentUserAndSetCurrentUserState();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      This is where employee information is displayed.\r\n      <TableContainer component={Paper}>\r\n        <Table className={styles.table} aria-label=\"reimbursement table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>Employee ID</TableCell>\r\n              <TableCell align=\"right\">Last Name</TableCell>\r\n              <TableCell align=\"right\">First Name</TableCell>\r\n              <TableCell align=\"right\">Password</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n              <TableRow >\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                  {salamander.currentUser.empID}\r\n                </TableCell>\r\n                <TableCell align=\"right\">{salamander.currentUser.lastName}</TableCell>\r\n                <TableCell align=\"right\">\r\n                  {salamander.currentUser.firstName}\r\n                </TableCell>\r\n                <TableCell align=\"right\">\r\n                  {salamander.currentUser.password}\r\n                </TableCell>\r\n                \r\n              </TableRow>\r\n          \r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmployeeInfoViewer;\r\n","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport LogoutButton from \"../components/LogoutButton/LogoutButton\";\r\nimport CreateRequestForm from \"../components/CreateRequestForm/CreateRequestForm\";\r\nimport ReimbursementTable from \"../components/ReimbursementTable/ReimbursementTable\";\r\nimport PageGreeting from \"../components/PageGreeting/PageGreeting\";\r\nimport EmployeeInfoViewer from \"../components/EmployeeInfoViewer/EmployeeInfoViewer\";\r\n\r\n\r\nconst EmployeeHome = () => {\r\n  return (\r\n    <div>\r\n      <PageGreeting />\r\n      <LogoutButton />\r\n      <CreateRequestForm />\r\n      What does a reimbursement request require?\r\n      <ReimbursementTable />\r\n      <EmployeeInfoViewer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmployeeHome;\r\n","import React from 'react'\r\n\r\nconst ManagerHome = () => {\r\n  return (\r\n    <div>\r\n      This will be the Manager Home page\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ManagerHome\r\n","import React from 'react'\r\n\r\nconst NoSuchUser = () => {\r\n  return (\r\n    <div>\r\n      No such user exists\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NoSuchUser\r\n","import React from 'react'\r\n\r\nconst InvalidPassword = () => {\r\n  return (\r\n    <div>\r\n      Invalid Password\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default InvalidPassword\r\n","import React from \"react\";\r\n\r\nconst Header = () => {\r\n  return <div>This will be the header.</div>;\r\n};\r\n\r\nexport default Header;\r\n","import React, { useState } from \"react\";\nimport Welcome from \"./pages/Welcome\";\nimport Login from \"./pages/Login/Login\";\nimport EmployeeHome from \"./pages/EmployeeHome\";\nimport ManagerHome from \"./pages/ManagerHome\";\nimport NoSuchUser from \"./pages/NoSuchUser\";\nimport InvalidPassword from \"./pages/InvalidPassword\";\n\nimport \"./Salamander.module.css\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Header from \"./components/Header\";\n\nfunction Salamander() {\n  // const updateFormData = (e) => {\n  //   const fieldName = e.target.name;\n  //   const value = e.target.value;\n  //   console.log(`Updated ${fieldName} with value ${value}`);\n  //   setFormData({ ...formData, [fieldName]: value });\n  // };\n  return (\n    <Router>\n      <Header />\n      <Switch>\n        <Route exact path=\"/\">\n          <Welcome />\n        </Route>\n        <Route exact path=\"/login\">\n          <Login />\n        </Route>\n        <Route exact path=\"/employee_home\">\n          <EmployeeHome />\n        </Route>\n        <Route exact path=\"/manager_home\">\n          <ManagerHome />\n        </Route>\n        <Route exact path=\"/invalid_password\">\n          <InvalidPassword />\n        </Route>\n        <Route exact path=\"/no_such_user\">\n          <NoSuchUser />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default Salamander;\n","import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\r\nimport salamanderReducer from \"./salamanderSlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    salamander: salamanderReducer\r\n  },\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Salamander from './Salamander';\nimport { store } from './redux/store';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Salamander />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"Salamander_App__2LeMn\",\"App-logo\":\"Salamander_App-logo__3zLcd\",\"table\":\"Salamander_table__2Piwo\"};"],"sourceRoot":""}