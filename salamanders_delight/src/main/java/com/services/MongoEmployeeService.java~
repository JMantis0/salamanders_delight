package com.services;

import com.daos.Dao;
import com.pojos.Employee;

/**
 * <h1>MongoEmployeeService</h1>
 * <h2>Service object that intermediates between the Dao and Controller objects.</h2>
 * <p>Responsible for performing business logic relating to Employees</p>
 * <p>The Controller typically calls the MongoService expecting instructions on what to display next.
 * The Service calls and uses responses from the Dao in order to determine which instructions to send back
 * to the Controller.</p>
 */
public class MongoEmployeeService implements MongoService<Employee> {
    private final Dao dao;

    public MongoEmployeeService(Dao dao) {this.dao = dao;}

    @Override
    public Employee findOne(String id) {
        return null;
    }

    /**
     * <p>
     * Returns a boolean value representing whether there exists an employee document in the MongoDB for the given
     * String parameter.
     * </p>
     * @param empID a String containing and employee ID.
     * @return userExists - a boolean whose value indicates whether or not such an employee exists.
     */
    public boolean doesUserExist(String empID) {
        System.out.println("Inside MongoEmployeeService : doesUserExists(" + empID + ")");
        boolean userExists = false;
        Employee emp = dao.getEmployeeByEmpID(empID);
        if(emp != null) {
            userExists = true;
        }
        System.out.println("userExists: " + userExists);
        return userExists;
    }

    /**
     * This method checks to see if the password stored in the database for the empID provided by the
     * client matches with the password provided by the client.
     * This method should only be called when an employ with the empID is known to exist in the database.
     * @param empID provided by client, used to call the dao.
     * @param passwordAttempt  provided by client, used to compare with password in DB.
     * @return boolean passwordIsValid - Represents whether the password provided by the client is correct or incorrect.
     */
    public boolean isPasswordValid(String empID, String passwordAttempt) {
        System.out.println("Inside MongoEmployeeService: isPasswordValid(" + empID + ", " + passwordAttempt + ")");
        boolean passwordIsValid = false;
        String correctPassword = dao.getEmployeePasswordByEmpID(empID);
        if(passwordAttempt.equals(correctPassword)) {
            passwordIsValid = true;
        }
        return passwordIsValid;
    }

    public Employee getEmployeeByEmpID(String empID) {
        System.out.println("Inside service getEmployeeByEmpID("+empID+")");
        return dao.getEmployeeByEmpID(empID);
    }

    public void updateOneEmployeeField(String empID, String field, String value) {
        System.out.println(2);
        dao.updateOneEmployeeField(empID, field, value);
    }
}
