{"version":3,"sources":["pages/Welcome.tsx","redux/hooks.ts","pages/Login/loginSlice.tsx","pages/Login/Login.tsx","pages/EmployeeHome.tsx","pages/ManagerHome.tsx","pages/NoSuchUser.tsx","pages/InvalidPassword.tsx","components/Header.tsx","Salamander.js","redux/store.ts","reportWebVitals.js","index.tsx"],"names":["Welcome","history","useHistory","Button","color","variant","onClick","e","push","useAppSelector","useSelector","loginSlice","createSlice","name","initialState","empID","password","reducers","handleChange","state","action","console","log","payload","fieldName","value","actions","selectLogin","login","useStyles","makeStyles","theme","root","margin","spacing","width","Login","classes","dispatch","useDispatch","formChangeHandler","event","target","className","noValidate","autoComplete","TextField","type","label","onChange","axios","post","headers","then","response","nextURL","data","catch","err","EmployeeHome","ManagerHome","NoSuchUser","InvalidPassword","Header","Salamander","exact","path","store","configureStore","reducer","loginReducer","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c4649d58.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Welcome = () => {\r\n  const history = useHistory();\r\n  return (\r\n    <div>\r\n      This will be the home page\r\n      <Button color=\"primary\" variant=\"contained\" onClick={(e) => {\r\n        history.push(\"/login\");\r\n      }}>\r\n        Enter\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Welcome;\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport type { RootState, AppDispatch } from './store';\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState, AppThunk } from '../../redux/store';\r\n\r\nexport interface LoginState {\r\n  empID: String;\r\n  password: String;\r\n}\r\n\r\nconst initialState: LoginState = {\r\n  empID: \"\",\r\n  password: \"\",\r\n};\r\n\r\nexport const loginSlice = createSlice({\r\n  name: 'login',\r\n  initialState,\r\n  reducers: {\r\n    handleChange: (state, action) => {\r\n     //Not sure what to do here\r\n     console.log(\"event\", action);\r\n     console.log(\"state\", state.empID);\r\n     console.log(`updating ${action.payload.fieldName} to ${action.payload.value}`)\r\n     state[action.payload.fieldName] = action.payload.value;\r\n     console.log(state);\r\n    }\r\n  }\r\n});\r\n\r\nexport const {handleChange} = loginSlice.actions;\r\n\r\nexport const selectLogin = (state: RootState) => state.login;\r\n\r\nexport default loginSlice.reducer;","import React, { useState } from \"react\";\r\n\r\nimport { useAppSelector, useAppDispatch } from \"../../redux/hooks\";\r\nimport { handleChange, selectLogin } from \"./loginSlice\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport axios from \"axios\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n      width: \"25ch\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst Login = () => {\r\n  const classes = useStyles();\r\n  const login = useAppSelector(selectLogin);\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n\r\n  const formChangeHandler = (event: { target: { name: any; value: any; }; }) => {\r\n    const fieldName = event.target.name;\r\n    const value = event.target.value;\r\n    dispatch(handleChange({fieldName, value}));\r\n  };\r\n\r\n  const submitLogin = () => {\r\n    console.log(\"login\", login);\r\n    console.log(\"Calling Login Servlet with login object: \", login);\r\n    axios\r\n      .post(\"/api/attempt_login\", login, {\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n      })\r\n      .then((response) => {\r\n        const nextURL = response.data;\r\n        history.push(nextURL);\r\n      })\r\n      .catch((err) => {\r\n        const nextURL = err.response.data;\r\n        history.push(nextURL);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      This will be the login page\r\n      <form className={classes.root} noValidate autoComplete=\"off\">\r\n        <TextField\r\n          autoComplete=\"off\"\r\n          type=\"text\"\r\n          label=\"Employee ID\"\r\n          variant=\"outlined\"\r\n          name=\"empID\"\r\n          onChange={formChangeHandler}\r\n        />\r\n        <TextField\r\n          autoComplete=\"off\"\r\n          type=\"password\"\r\n          label=\"Password\"\r\n          variant=\"outlined\"\r\n          name=\"password\"\r\n          onChange={formChangeHandler}\r\n        />\r\n        <Button color=\"primary\" variant=\"contained\" onClick={submitLogin}>\r\n          Submit\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import React from \"react\";\r\n\r\nconst EmployeeHome = () => {\r\n  return <div>This will be the Employee Home Page</div>;\r\n};\r\n\r\nexport default EmployeeHome;\r\n","import React from 'react'\r\n\r\nconst ManagerHome = () => {\r\n  return (\r\n    <div>\r\n      This will be the Manager Home page\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ManagerHome\r\n","import React from 'react'\r\n\r\nconst NoSuchUser = () => {\r\n  return (\r\n    <div>\r\n      No such user exists\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NoSuchUser\r\n","import React from 'react'\r\n\r\nconst InvalidPassword = () => {\r\n  return (\r\n    <div>\r\n      Invalid Password\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default InvalidPassword\r\n","import React from \"react\";\r\n\r\nconst Header = () => {\r\n  return <div>This will be the header.</div>;\r\n};\r\n\r\nexport default Header;\r\n","import React, { useState } from \"react\";\nimport Welcome from \"./pages/Welcome\";\nimport Login from \"./pages/Login/Login\";\nimport EmployeeHome from \"./pages/EmployeeHome\";\nimport ManagerHome from \"./pages/ManagerHome\";\nimport NoSuchUser from \"./pages/NoSuchUser\";\nimport InvalidPassword from \"./pages/InvalidPassword\";\n\nimport \"./Salamander.css\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Header from \"./components/Header\";\n\nfunction Salamander() {\n  // const updateFormData = (e) => {\n  //   const fieldName = e.target.name;\n  //   const value = e.target.value;\n  //   console.log(`Updated ${fieldName} with value ${value}`);\n  //   setFormData({ ...formData, [fieldName]: value });\n  // };\n  return (\n    <Router>\n      <Header />\n      <Switch>\n        <Route exact path=\"/\">\n          <Welcome />\n        </Route>\n        <Route exact path=\"/login\">\n          <Login />\n        </Route>\n        <Route exact path=\"/employee_home\">\n          <EmployeeHome />\n        </Route>\n        <Route exact path=\"/manager_home\">\n          <ManagerHome />\n        </Route>\n        <Route exact path=\"/invalid_password\">\n          <InvalidPassword />\n        </Route>\n        <Route exact path=\"/no_such_user\">\n          <NoSuchUser />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default Salamander;\n","import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\r\nimport loginReducer from \"../pages/Login/loginSlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    login: loginReducer,\r\n  },\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Salamander from './Salamander';\nimport { store } from './redux/store';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Salamander />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}