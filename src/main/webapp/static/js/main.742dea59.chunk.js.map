{"version":3,"sources":["components/ReimbursementTable/ReimbursementTable.tsx","pages/Welcome.tsx","redux/hooks.ts","redux/loginSlice.tsx","pages/Login/Login.tsx","components/LogoutButton/LogoutButton.tsx","pages/EmployeeHome.tsx","pages/ManagerHome.tsx","pages/NoSuchUser.tsx","pages/InvalidPassword.tsx","components/Header.tsx","Salamander.js","redux/store.ts","reportWebVitals.js","index.tsx"],"names":["justification","amount","status","Welcome","history","useHistory","Button","color","variant","onClick","e","push","useAppDispatch","useDispatch","useAppSelector","useSelector","loginSlice","createSlice","name","initialState","empID","password","reducers","handleLoginFormChange","state","action","console","log","fieldName","payload","value","resetLoginFormData","actions","selectLogin","login","useStyles","makeStyles","theme","root","margin","spacing","width","Login","classes","dispatch","formChangeHandler","event","target","className","noValidate","autoComplete","TextField","type","label","onChange","axios","post","headers","then","response","nextURL","data","catch","err","LogoutButton","table","minWidth","rows","ReimbursementTable","Fragment","get","JSON","parse","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","row","scope","EmployeeHome","ManagerHome","NoSuchUser","InvalidPassword","Header","Salamander","exact","path","store","configureStore","reducer","loginReducer","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.742dea59.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport axios from \"axios\";\r\nimport { selectLogin } from \"../../redux/loginSlice\";\r\nimport { useAppSelector } from \"../../redux/hooks\";\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n});\r\n\r\nconst createReimbursementData = (\r\n  justification: string,\r\n  amount: number,\r\n  status: boolean\r\n) => {\r\n  return { justification, amount, status };\r\n};\r\n\r\nconst rows = [createReimbursementData(\"Lodging\", 100.0, false)];\r\nconsole.log(rows);\r\n\r\nconst ReimbursementTable = () => {\r\n  const classes = useStyles();\r\n  const login = useAppSelector(selectLogin);\r\n\r\n  const getAllReimbursementRequestsForCurrentUser = () => {\r\n    axios\r\n      .get(`/api/get_requests?empID=${login.empID}`)\r\n      .then((response) => {\r\n        console.log(\"JSON.parse(response.data)\", JSON.parse(response.data));\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"there was an error: \", err);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Button\r\n        onClick={() => {\r\n          getAllReimbursementRequestsForCurrentUser();\r\n        }}\r\n      >\r\n        Get Reimbursement Request Data\r\n      </Button>\r\n      <TableContainer component={Paper}>\r\n        <Table className={classes.table} aria-label=\"reimbursement table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>Justification</TableCell>\r\n              <TableCell align=\"right\">Amount</TableCell>\r\n              <TableCell align=\"right\">Status</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows.map((row) => (\r\n              <TableRow\r\n              key={row.justification}\r\n              >\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                  {row.justification}\r\n                </TableCell>\r\n                <TableCell align=\"right\">{row.amount}</TableCell>\r\n                <TableCell align=\"right\">\r\n                  {row.status ? \"Resolved\" : \"Pending\"}\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ReimbursementTable;\r\n","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Welcome = () => {\r\n  const history = useHistory();\r\n  return (\r\n    <div>\r\n      This will be the home page\r\n      <Button color=\"primary\" variant=\"contained\" onClick={(e) => {\r\n        history.push(\"/login\");\r\n      }}>\r\n        Enter\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Welcome;\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport type { RootState, AppDispatch } from './store';\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { RootState, AppThunk } from \"./store\";\r\n\r\nexport interface LoginState {\r\n  empID: String;\r\n  password: String;\r\n}\r\n\r\nconst initialState: LoginState = {\r\n  empID: \"\",\r\n  password: \"\",\r\n};\r\n\r\nexport const loginSlice = createSlice({\r\n  name: \"login\",\r\n  initialState,\r\n  reducers: {\r\n    handleLoginFormChange: (state, action) => {\r\n      console.log(\"action\", action);\r\n      const fieldName = action.payload.fieldName;\r\n      const value = action.payload.value;\r\n      switch (fieldName) {\r\n        case \"empID\":\r\n          console.log(`updating ${fieldName} to ${value}`);\r\n          state.empID = value;\r\n          break;\r\n        case \"password\":\r\n          console.log(`updating ${fieldName} to ${value}`);\r\n          state.password = value;\r\n          break;\r\n      }\r\n    },\r\n    resetLoginFormData: (state) => {\r\n      state.empID = \"\";\r\n      state.password = \"\";\r\n    },\r\n  },\r\n});\r\n\r\nexport const { handleLoginFormChange, resetLoginFormData } = loginSlice.actions;\r\n\r\nexport const selectLogin = (state: RootState) => state.login;\r\n\r\nexport default loginSlice.reducer;\r\n","import React from \"react\";\r\n\r\nimport { useAppSelector, useAppDispatch } from \"../../redux/hooks\";\r\nimport { resetLoginFormData, handleLoginFormChange, selectLogin } from \"../../redux/loginSlice\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport axios from \"axios\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n      width: \"25ch\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst Login = () => {\r\n  const classes = useStyles();\r\n  const login = useAppSelector(selectLogin);\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  const formChangeHandler = (event: { target: { name: any; value: any; }; }) => {\r\n    const fieldName = event.target.name;\r\n    const value = event.target.value;\r\n    dispatch(handleLoginFormChange({fieldName, value}));\r\n  };\r\n\r\n  const submitLogin = () => {\r\n    console.log(\"login\", login);\r\n    console.log(\"Calling Login Servlet with login object: \", login);\r\n    axios\r\n      .post(\"/api/attempt_login\", login, {\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n      })\r\n      .then((response) => {\r\n        const nextURL = response.data;\r\n        // Should we set some kind of state for the currently logged in user?\r\n        console.log(login);\r\n        history.push(nextURL);\r\n      })\r\n      .catch((err) => {\r\n        const nextURL = err.response.data;\r\n        dispatch(resetLoginFormData());\r\n        history.push(nextURL);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      This will be the login page\r\n      <form className={classes.root} noValidate autoComplete=\"off\">\r\n        <TextField\r\n          autoComplete=\"off\"\r\n          type=\"text\"\r\n          label=\"Employee ID\"\r\n          variant=\"outlined\"\r\n          name=\"empID\"\r\n          onChange={formChangeHandler}\r\n        />\r\n        <TextField\r\n          autoComplete=\"off\"\r\n          type=\"password\"\r\n          label=\"Password\"\r\n          variant=\"outlined\"\r\n          name=\"password\"\r\n          onChange={formChangeHandler}\r\n        />\r\n        <Button color=\"primary\" variant=\"contained\" onClick={submitLogin}>\r\n          Submit\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { resetLoginFormData, handleLoginFormChange, selectLogin } from \"../../redux/loginSlice\";\r\nimport { useAppSelector, useAppDispatch } from \"../../redux/hooks\";\r\n\r\n\r\nconst LogoutButton = () => {\r\n  const history = useHistory();\r\n  const login = useAppSelector(selectLogin);\r\n  const dispatch = useAppDispatch();\r\n  // This should return a user to the welcome page\r\n  //  How should it effect the state?\r\n  //  The currently logged in user should be logged out.\r\n  //  Is there a currentl logged in user?\r\n  const handleClick = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n     //  Reset currently logged in user State\r\n     dispatch(resetLoginFormData());\r\n    history.push(\"/\");\r\n  };\r\n  return (\r\n    <div>\r\n      <Button\r\n        onClick={(e) => {\r\n          handleClick(e);\r\n        }}\r\n      >\r\n        Log Out\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LogoutButton;\r\n","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport LogoutButton from \"../components/LogoutButton/LogoutButton\";\r\nimport ReimbursementTable from \"../components/ReimbursementTable/ReimbursementTable\";\r\n\r\nconst EmployeeHome = () => {\r\n  return (\r\n    <div>\r\n      <h1>This will be the Employee Home Page</h1>\r\n      <Button>wtf is this for</Button>\r\n      <LogoutButton />\r\n      <div>Create Reimbursement Request Div</div>\r\n      What does a reimbursement request require?\r\n      <ReimbursementTable />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmployeeHome;\r\n","import React from 'react'\r\n\r\nconst ManagerHome = () => {\r\n  return (\r\n    <div>\r\n      This will be the Manager Home page\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ManagerHome\r\n","import React from 'react'\r\n\r\nconst NoSuchUser = () => {\r\n  return (\r\n    <div>\r\n      No such user exists\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NoSuchUser\r\n","import React from 'react'\r\n\r\nconst InvalidPassword = () => {\r\n  return (\r\n    <div>\r\n      Invalid Password\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default InvalidPassword\r\n","import React from \"react\";\r\n\r\nconst Header = () => {\r\n  return <div>This will be the header.</div>;\r\n};\r\n\r\nexport default Header;\r\n","import React, { useState } from \"react\";\nimport Welcome from \"./pages/Welcome\";\nimport Login from \"./pages/Login/Login\";\nimport EmployeeHome from \"./pages/EmployeeHome\";\nimport ManagerHome from \"./pages/ManagerHome\";\nimport NoSuchUser from \"./pages/NoSuchUser\";\nimport InvalidPassword from \"./pages/InvalidPassword\";\n\nimport \"./Salamander.css\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Header from \"./components/Header\";\n\nfunction Salamander() {\n  // const updateFormData = (e) => {\n  //   const fieldName = e.target.name;\n  //   const value = e.target.value;\n  //   console.log(`Updated ${fieldName} with value ${value}`);\n  //   setFormData({ ...formData, [fieldName]: value });\n  // };\n  return (\n    <Router>\n      <Header />\n      <Switch>\n        <Route exact path=\"/\">\n          <Welcome />\n        </Route>\n        <Route exact path=\"/login\">\n          <Login />\n        </Route>\n        <Route exact path=\"/employee_home\">\n          <EmployeeHome />\n        </Route>\n        <Route exact path=\"/manager_home\">\n          <ManagerHome />\n        </Route>\n        <Route exact path=\"/invalid_password\">\n          <InvalidPassword />\n        </Route>\n        <Route exact path=\"/no_such_user\">\n          <NoSuchUser />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default Salamander;\n","import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\r\nimport loginReducer from \"./loginSlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    login: loginReducer,\r\n  },\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Salamander from './Salamander';\nimport { store } from './redux/store';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Salamander />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}